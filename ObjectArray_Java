import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Scanner; 

// numerous imports are needed

public class ObjectArray {				
		static Object[] obj; //array of objects
		static int size;  //size for the array
				
	public static void populateArray() {
		Scanner scanner = new Scanner(System.in);		//two scanners are needed as I get confused. 
		Scanner scanning = new Scanner(System.in);		// the first input prevents me from entering the elements in an array, that's why I made the second one
		
		System.out.print("Enter the size of the array: "); //user interaction. 
		 size = Integer.parseInt(scanner.nextLine()); 		// accepting user input
		
		System.out.print("Enter " + size + " elements: ");	//user interaction
		String elements = scanning.nextLine().trim();		// accepting user input, the elements are stored in String and any excess white spaces are trimmed. 
		
		obj = elements.split(","); // the elements entered by the user are stored in the array of objects. The elements are then split via "," 
		
		/*		for checking purposes
		for (Object element : obj) {
		    System.out.print(element+ " ,");
		}	
		*/ 	
	}
	
	public static void displayReverseOrder(Object[] obj) {
		System.out.print("Reverse Order: "); 		
	    for (int i = obj.length - 1; i >= 0; i--) { 		//basing on the length of obj, as long as i is greater than or equal, decrement
	    System.out.print(obj[i]+ (i == 0 ? "" : ", "));     // prints out sorted elements
	    }	    
	    System.out.println();								// adds a new line
	   
	}
	
	public static void displayAscendingOrder(Object[] obj) {
		 for (int i = 0; i < obj.length - 1; i++) {			//iterates through the array (hopefully)
		        for (int j = i + 1; j < obj.length; j++) {  // comparing of elements 		            
		        	//extracting
		            String num1Str = (String) obj[i];		// conversion  
		            String num2Str = (String) obj[j];		// conversion
		            Matcher matcher1 = Pattern.compile("\\d+").matcher(num1Str);  //Returns the pattern that is interpreted by this matcher.
		            Matcher matcher2 = Pattern.compile("\\d+").matcher(num2Str);

		            int num1 = 0, num2 = 0;
		            if (matcher1.find()) {					// Attempts to find the next subsequence of the input sequence that matches the pattern.
		                num1 = Integer.parseInt(matcher1.group()); 
		            }
		            if (matcher2.find()) {
		                num2 = Integer.parseInt(matcher2.group());
		            }

		            // Compare numbers and swap elements if needed
		            if (num1 > num2) {
		                Object temp = obj[i];
		                obj[i] = obj[j];
		                obj[j] = temp;
		            } else if (num1 == num2) {
		                // Handle cases where you want alphabetic order for ties (optional)
		                int compareResult = ((String) obj[i]).compareTo((String) obj[j]);
		                if (compareResult > 0) {
		                    Object temp = obj[i]; // data swap
		                    obj[i] = obj[j];
		                    obj[j] = temp;
		                }
		            }
		        }
		    }

		 System.out.print("Ascending Order: "); //printing of the elements in ascending order
		 for (int i = 0; i < obj.length; i++) {		    
			 System.out.print(obj[i] + (i < obj.length - 1 ? ", " : ""));
		    }
		    System.out.println();
		}
	      

	public static void main(String[] args) {	
		populateArray();  //calling all the function
		displayReverseOrder(obj);
		displayAscendingOrder(obj);
		
	}
	

}
